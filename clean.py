#!/usr/bin/env python3
"""
Script pour nettoyer toutes les donn√©es de test de la pharmacie 832002810
"""

import psycopg2

def clean_pharmacy_data(pharmacy_id_nat):
    """Supprime toutes les donn√©es d'une pharmacie"""
    try:
        print(f"üßπ NETTOYAGE DES DONN√âES DE TEST")
        print(f"üè• Pharmacie ID: {pharmacy_id_nat}")
        print(f"=" * 50)
        
        # Connection DB
        conn = psycopg2.connect(
            host="phardev.cts8s2sgms8l.eu-west-3.rds.amazonaws.com",
            database="postgres",
            user="postgres",
            password="NNPwUUstdTonFYZwfisO",
            port=5432
        )
        
        cursor = conn.cursor()
        
        # 1. Trouver l'UUID de la pharmacie
        cursor.execute("SELECT id FROM data_pharmacy WHERE id_nat = %s", (pharmacy_id_nat,))
        result = cursor.fetchone()
        
        if not result:
            print(f"‚ùå Pharmacie {pharmacy_id_nat} introuvable")
            return False
            
        pharmacy_uuid = result[0]
        print(f"üìã Pharmacie UUID: {pharmacy_uuid}")
        
        # 2. Compter avant suppression
        print(f"\nüìä DONN√âES AVANT SUPPRESSION:")
        
        # Compter sales
        cursor.execute("""
            SELECT COUNT(*) FROM data_sales s
            JOIN data_inventorysnapshot inv ON s.product_id = inv.id
            JOIN data_internalproduct ip ON inv.product_id = ip.id  
            WHERE ip.pharmacy_id = %s
        """, (pharmacy_uuid,))
        sales_count = cursor.fetchone()[0]
        print(f"   üí∞ Ventes: {sales_count}")
        
        # Compter orders
        cursor.execute("SELECT COUNT(*) FROM data_order WHERE pharmacy_id = %s", (pharmacy_uuid,))
        orders_count = cursor.fetchone()[0]
        print(f"   üì¶ Commandes: {orders_count}")
        
        # Compter product orders
        cursor.execute("""
            SELECT COUNT(*) FROM data_productorder po
            JOIN data_order o ON po.order_id = o.id
            WHERE o.pharmacy_id = %s
        """, (pharmacy_uuid,))
        product_orders_count = cursor.fetchone()[0]
        print(f"   üìã Lignes commandes: {product_orders_count}")
        
        # Compter snapshots
        cursor.execute("""
            SELECT COUNT(*) FROM data_inventorysnapshot inv
            JOIN data_internalproduct ip ON inv.product_id = ip.id  
            WHERE ip.pharmacy_id = %s
        """, (pharmacy_uuid,))
        snapshots_count = cursor.fetchone()[0]
        print(f"   üì∏ Snapshots: {snapshots_count}")
        
        # Compter products
        cursor.execute("SELECT COUNT(*) FROM data_internalproduct WHERE pharmacy_id = %s", (pharmacy_uuid,))
        products_count = cursor.fetchone()[0]
        print(f"   üè∑Ô∏è Produits: {products_count}")
        
        # Compter suppliers
        cursor.execute("SELECT COUNT(*) FROM data_supplier WHERE pharmacy_id = %s", (pharmacy_uuid,))
        suppliers_count = cursor.fetchone()[0]
        print(f"   üè¢ Fournisseurs: {suppliers_count}")
        
        # 3. Supprimer dans l'ordre des d√©pendances
        print(f"\nüóëÔ∏è SUPPRESSION EN COURS...")
        
        # Sales (d√©pend de snapshots)
        cursor.execute("""
            DELETE FROM data_sales 
            WHERE product_id IN (
                SELECT inv.id FROM data_inventorysnapshot inv
                JOIN data_internalproduct ip ON inv.product_id = ip.id  
                WHERE ip.pharmacy_id = %s
            )
        """, (pharmacy_uuid,))
        print(f"   ‚úÖ Sales supprim√©es: {cursor.rowcount}")
        
        # ProductOrder (d√©pend de orders et products)
        cursor.execute("""
            DELETE FROM data_productorder 
            WHERE order_id IN (
                SELECT id FROM data_order WHERE pharmacy_id = %s
            )
        """, (pharmacy_uuid,))
        print(f"   ‚úÖ ProductOrders supprim√©es: {cursor.rowcount}")
        
        # Orders
        cursor.execute("DELETE FROM data_order WHERE pharmacy_id = %s", (pharmacy_uuid,))
        print(f"   ‚úÖ Orders supprim√©es: {cursor.rowcount}")
        
        # Inventory snapshots
        cursor.execute("""
            DELETE FROM data_inventorysnapshot 
            WHERE product_id IN (
                SELECT id FROM data_internalproduct WHERE pharmacy_id = %s
            )
        """, (pharmacy_uuid,))
        print(f"   ‚úÖ Snapshots supprim√©s: {cursor.rowcount}")
        
        # Internal products
        cursor.execute("DELETE FROM data_internalproduct WHERE pharmacy_id = %s", (pharmacy_uuid,))
        print(f"   ‚úÖ Products supprim√©s: {cursor.rowcount}")
        
        # Suppliers
        cursor.execute("DELETE FROM data_supplier WHERE pharmacy_id = %s", (pharmacy_uuid,))
        print(f"   ‚úÖ Suppliers supprim√©s: {cursor.rowcount}")
        
        # Pharmacy (en dernier)
        cursor.execute("DELETE FROM data_pharmacy WHERE id = %s", (pharmacy_uuid,))
        print(f"   ‚úÖ Pharmacy supprim√©e: {cursor.rowcount}")
        
        # 4. Commit les changements
        conn.commit()
        
        print(f"\nüéâ NETTOYAGE TERMIN√â !")
        print(f"‚úÖ Toutes les donn√©es de la pharmacie {pharmacy_id_nat} ont √©t√© supprim√©es")
        
        cursor.close()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage: {e}")
        return False

def main():
    """Fonction principale"""
    pharmacy_id = "832002810"
    
    print(f"‚ö†Ô∏è  ATTENTION: Ce script va supprimer TOUTES les donn√©es de test !")
    print(f"üè• Pharmacie: {pharmacy_id}")
    
    confirm = input("\n‚ùì Confirmes-tu la suppression ? (oui/non): ").lower().strip()
    
    if confirm in ['oui', 'o', 'yes', 'y']:
        success = clean_pharmacy_data(pharmacy_id)
        if success:
            print(f"\nüöÄ PR√äT POUR UN NOUVEAU TEST PROPRE !")
            print(f"üìù Prochaine √©tape: Lancer la Lambda pour le 20 juin uniquement")
        else:
            print(f"\n‚ùå Nettoyage √©chou√©")
    else:
        print(f"\n‚èπÔ∏è Nettoyage annul√©")

if __name__ == "__main__":
    main()