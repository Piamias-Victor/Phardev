def process_sales_with_tva_update(pharmacy: Pharmacy, sales_data: dict) -> dict:
    """
    Version DEBUG du traitement des ventes avec logs d√©taill√©s
    """
    from data.models import InternalProduct, Sales, InventorySnapshot
    from django.db import transaction
    
    result = {
        'sales_processed': 0,
        'tva_updates': 0,
        'errors': [],
        'debug_info': {
            'total_ventes_received': 0,
            'total_lignes_received': 0,
            'products_not_found': 0,
            'snapshots_not_found': 0,
            'existing_sales_skipped': 0
        }
    }
    
    # Validation de la structure des donn√©es
    logger.info("üîç DEBUG: Analyse de la structure des donn√©es")
    
    if not isinstance(sales_data, list):
        logger.error(f"‚ùå sales_data n'est pas une liste: {type(sales_data)}")
        return result
    
    if len(sales_data) == 0:
        logger.warning("‚ö†Ô∏è sales_data est une liste vide")
        return result
    
    logger.info(f"‚úÖ sales_data est une liste de {len(sales_data)} √©l√©ments")
    
    # Analyser le premier √©l√©ment
    first_element = sales_data[0]
    logger.info(f"üîç Premier √©l√©ment cl√©s: {list(first_element.keys())}")
    
    if 'ventes' not in first_element:
        logger.error("‚ùå Pas de cl√© 'ventes' dans les donn√©es")
        return result
    
    pharmacy_sales = first_element['ventes']
    result['debug_info']['total_ventes_received'] = len(pharmacy_sales)
    
    # Compter le total de lignes
    total_lignes = sum(len(vente.get('lignes', [])) for vente in pharmacy_sales)
    result['debug_info']['total_lignes_received'] = total_lignes
    
    logger.info(f"üìä DEBUG: {len(pharmacy_sales)} ventes re√ßues avec {total_lignes} lignes")
    
    # Analyser quelques ventes pour comprendre la structure
    if len(pharmacy_sales) > 0:
        sample_vente = pharmacy_sales[0]
        logger.info(f"üîç Structure vente exemple: {list(sample_vente.keys())}")
        
        if 'lignes' in sample_vente and len(sample_vente['lignes']) > 0:
            sample_ligne = sample_vente['lignes'][0]
            logger.info(f"üîç Structure ligne exemple: {list(sample_ligne.keys())}")
    
    # Traitement avec logs d√©taill√©s
    with transaction.atomic():
        tva_updates_count = 0
        products_not_found = 0
        snapshots_not_found = 0
        existing_sales_skipped = 0
        
        for i, vente in enumerate(pharmacy_sales):
            if i % 1000 == 0:  # Log toutes les 1000 ventes
                logger.info(f"‚è≥ Traitement vente {i+1}/{len(pharmacy_sales)}")
            
            try:
                # Extraire la date
                date_facture = vente.get('dateFacture', '')
                if not date_facture:
                    continue
                    
                vente_date = date_facture.split('T')[0]  # Format YYYY-MM-DD
                
                # Traiter chaque ligne
                lignes = vente.get('lignes', [])
                for ligne in lignes:
                    try:
                        # Extraire les donn√©es
                        prod_id = ligne.get('prodId')
                        code13_ref = ligne.get('code13Ref')
                        qte = ligne.get('qte', 0)
                        tva = ligne.get('tva')
                        
                        if not prod_id or not code13_ref:
                            continue
                        
                        # Recherche du produit interne
                        try:
                            internal_product = InternalProduct.objects.get(
                                pharmacy=pharmacy,
                                code_13_ref_id=code13_ref
                            )
                        except InternalProduct.DoesNotExist:
                            products_not_found += 1
                            if products_not_found <= 5:  # Log seulement les 5 premiers
                                logger.warning(f"‚ö†Ô∏è Produit non trouv√©: {code13_ref}")
                            continue
                        
                        # Recherche du snapshot
                        try:
                            latest_snapshot = InventorySnapshot.objects.filter(
                                product=internal_product
                            ).order_by('-date', '-created_at').first()
                            
                            if not latest_snapshot:
                                snapshots_not_found += 1
                                if snapshots_not_found <= 5:
                                    logger.warning(f"‚ö†Ô∏è Pas de snapshot pour: {code13_ref}")
                                continue
                                
                        except Exception as e:
                            logger.error(f"‚ùå Erreur recherche snapshot {code13_ref}: {e}")
                            continue
                        
                        # V√©rifier si la vente existe d√©j√†
                        if Sales.objects.filter(
                            date=vente_date,
                            product_id=latest_snapshot.id,
                            quantity=qte
                        ).exists():
                            existing_sales_skipped += 1
                            continue
                        
                        # Cr√©er la vente
                        Sales.objects.create(
                            date=vente_date,
                            product_id=latest_snapshot.id,
                            quantity=qte
                        )
                        result['sales_processed'] += 1
                        
                        # Mise √† jour TVA
                        if tva is not None and internal_product.TVA != tva:
                            internal_product.TVA = tva
                            internal_product.save(update_fields=['TVA'])
                            tva_updates_count += 1
                            
                            if tva_updates_count <= 10:  # Log les 10 premi√®res
                                logger.info(f"üîÑ TVA mise √† jour {code13_ref}: {tva}%")
                        
                    except Exception as e:
                        error_msg = f"Erreur ligne {prod_id}: {e}"
                        if len(result['errors']) < 10:  # Limite les erreurs logg√©es
                            logger.error(f"‚ùå {error_msg}")
                            result['errors'].append(error_msg)
                        continue
                        
            except Exception as e:
                error_msg = f"Erreur vente {vente.get('id', 'unknown')}: {e}"
                if len(result['errors']) < 10:
                    logger.error(f"‚ùå {error_msg}")
                    result['errors'].append(error_msg)
                continue
        
        # Mettre √† jour les stats debug
        result['tva_updates'] = tva_updates_count
        result['debug_info']['products_not_found'] = products_not_found
        result['debug_info']['snapshots_not_found'] = snapshots_not_found
        result['debug_info']['existing_sales_skipped'] = existing_sales_skipped
        
        # Log final d√©taill√©
        logger.info("üìä R√âSULTAT FINAL TRAITEMENT VENTES:")
        logger.info(f"   üì• Ventes re√ßues: {result['debug_info']['total_ventes_received']}")
        logger.info(f"   üìã Lignes re√ßues: {result['debug_info']['total_lignes_received']}")
        logger.info(f"   ‚úÖ Ventes cr√©√©es: {result['sales_processed']}")
        logger.info(f"   üîÑ TVA mises √† jour: {result['tva_updates']}")
        logger.info(f"   ‚ùå Produits non trouv√©s: {result['debug_info']['products_not_found']}")
        logger.info(f"   üì¶ Snapshots manquants: {result['debug_info']['snapshots_not_found']}")
        logger.info(f"   üîÑ Ventes existantes ignor√©es: {result['debug_info']['existing_sales_skipped']}")
        
        if result['debug_info']['products_not_found'] > 0:
            logger.warning(f"‚ö†Ô∏è PROBL√àME MAJEUR: {result['debug_info']['products_not_found']} produits non trouv√©s")
            logger.warning("   V√©rifiez que les produits ont √©t√© import√©s avant les ventes")
        
        if result['debug_info']['snapshots_not_found'] > 0:
            logger.warning(f"‚ö†Ô∏è PROBL√àME: {result['debug_info']['snapshots_not_found']} snapshots manquants")
            logger.warning("   Les produits existent mais n'ont pas de snapshots d'inventaire")
        
    return result