#!/usr/bin/env python3
"""
Script de test pour l'endpoint ventes sur une p√©riode de deux jours
"""

import requests
import json
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Variables d'environnement pour le test
SERVER_URL = os.environ.get('SERVER_URL', 'https://api.phardev.fr')
API_URL = os.environ.get('API_URL', 'YXBvdGhpY2Fs')
API_PASSWORD = os.environ.get('API_PASSWORD', 'cGFzczE')
IDNATS = os.environ.get('IDNATS', '832011373')

def test_ventes_periode(dt1, dt2, description):
    """
    Teste l'endpoint ventes avec une p√©riode sp√©cifique
    
    Args:
        dt1 (str): Date de d√©but au format YYYY-MM-DD
        dt2 (str): Date de fin au format YYYY-MM-DD
        description (str): Description de la p√©riode pour l'affichage
    """
    print(f"\n===== Test de l'endpoint ventes pour la p√©riode {description}: {dt1} √† {dt2} =====")
    
    # Construire l'URL
    url = f"https://grpstat.winpharma.com/ApiWp/{API_URL}/ventes?password={API_PASSWORD}&Idnats={IDNATS}&dt1={dt1}&dt2={dt2}"
    print(f"URL: {url}")
    
    try:
        # Requ√™te √† l'API
        response = requests.get(url)
        
        # Traiter la r√©ponse
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Succ√®s! Statut: {response.status_code}")
            print(f"   Taille de la r√©ponse: {len(json.dumps(data))} caract√®res")
            
            # Analyser les donn√©es
            if data and len(data) > 0:
                if 'ventes' in data[0]:
                    ventes = data[0]['ventes']
                    print(f"   Nombre de ventes: {len(ventes)}")
                    
                    # Analyser les dates
                    dates = {}
                    for vente in ventes:
                        date = vente['heure'].split('T')[0]
                        dates[date] = dates.get(date, 0) + 1
                    
                    print("   R√©partition des ventes par jour:")
                    for date, count in sorted(dates.items()):
                        print(f"   - {date}: {count} ventes")
                    
                    # Enregistrer les donn√©es pour analyse
                    filename = f"ventes_{dt1}_to_{dt2}.json"
                    with open(filename, "w", encoding="utf-8") as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)
                    print(f"   Donn√©es enregistr√©es dans {filename}")
                    
                    # Essayer d'envoyer au serveur
                    print("\n   Envoi des donn√©es au serveur...")
                    server_response = requests.post(
                        f"{SERVER_URL}/winpharma_2/create/sales", 
                        json=data,
                        headers={'Pharmacy-id': IDNATS}
                    )
                    
                    if server_response.status_code == 200:
                        print(f"   ‚úÖ Donn√©es envoy√©es avec succ√®s! Statut: {server_response.status_code}")
                        print(f"      R√©ponse: {server_response.text}")
                        return True, ventes, dates
                    else:
                        print(f"   ‚ùå Erreur serveur: {server_response.status_code}")
                        print(f"      R√©ponse: {server_response.text}")
                else:
                    print(f"   ‚ùå Cl√© 'ventes' non trouv√©e dans les donn√©es")
            else:
                print(f"   ‚ùå Donn√©es vides ou mal structur√©es")
                
        elif response.status_code == 204:
            print(f"‚ö†Ô∏è Pas de contenu (204): Aucune vente trouv√©e pour cette p√©riode")
        elif response.status_code == 400 and "dt2 est post√©rieur aux donn√©es" in response.text:
            print(f"‚ö†Ô∏è Date future: {response.text}")
            
            # Essayer d'extraire la date maximale disponible
            import re
            match = re.search(r"derni√®re date disponible = (\d{4}-\d{2}-\d{2})", response.text)
            if match:
                max_date = match.group(1)
                print(f"   Date maximale disponible: {max_date}")
                
                if max_date <= dt1:
                    print(f"   ‚ö†Ô∏è La date maximale est ant√©rieure √† la date de d√©but, impossible de continuer")
                    return False, None, None
                
                print(f"   R√©essai avec la date maximale comme fin...")
                
                # R√©essayer avec la date maximale
                url_corrected = url.replace(f"dt2={dt2}", f"dt2={max_date}")
                return test_ventes_periode(dt1, max_date, f"{description} (corrig√©e)")
        else:
            print(f"‚ùå Erreur: {response.status_code}")
            print(f"   {response.text}")
            
    except Exception as e:
        print(f"‚ùå Exception: {str(e)}")
    
    return False, None, None

# G√©n√©rer le code Lambda pour l'approche avec p√©riode sp√©cifique
def generate_lambda_code(dt1, dt2):
    """
    G√©n√®re le code Lambda modifi√© pour r√©cup√©rer les ventes avec une p√©riode sp√©cifique
    
    Args:
        dt1 (str): Date de d√©but
        dt2 (str): Date de fin
    """
    code = f"""# Modification √† apporter au Lambda pour r√©cup√©rer les ventes sur la p√©riode {dt1} √† {dt2}

# Dans la fonction handler, remplacer la partie de calcul des dates par:
    # Dates sp√©cifiques pour chaque endpoint
    for in_endpoint, out_endpoint in endpoints.items():
        print(f"Traitement de l'endpoint {{in_endpoint}}...")
        
        # Construire l'URL de base
        url = f"https://grpstat.winpharma.com/ApiWp/{{API_URL}}/{{in_endpoint}}?password={{API_PASSWORD}}&Idnats={{IDNATS}}"
        
        # Ajouter les param√®tres de date selon l'endpoint
        if in_endpoint == 'ventes':
            # Pour les ventes: utiliser une p√©riode fixe de deux jours qui fonctionne
            url += f"&dt1={dt1}&dt2={dt2}"
        elif not full_dump:
            # Pour les autres endpoints: utiliser la plage habituelle (hier √† aujourd'hui)
            dt2_current = datetime.now().strftime('%Y-%m-%d')
            dt1_current = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
            url += f"&dt1={{dt1_current}}&dt2={{dt2_current}}"
"""
    return code

# Programme principal
if __name__ == "__main__":
    print("üîç TEST DE L'ENDPOINT VENTES SUR DES P√âRIODES DE DEUX JOURS")
    print("----------------------------------------------------------")
    
    # Tester diff√©rentes p√©riodes de deux jours
    # Modifier ces dates pour tester diff√©rentes p√©riodes
    periodes = [
        # Juin 2025
        ("2025-06-01", "2025-06-02", "D√©but juin"),
        ("2025-06-10", "2025-06-11", "Mi-juin"),
        
        # Mai 2025
        ("2025-05-20", "2025-05-21", "Fin mai"),
        ("2025-05-10", "2025-05-11", "Mi-mai"),
        
        # Avril 2025
        ("2025-04-20", "2025-04-21", "Fin avril"),
        
        # P√©riode plus longue pour comparaison
        ("2025-05-01", "2025-05-07", "Premi√®re semaine de mai")
    ]
    
    results = {}
    
    for dt1, dt2, desc in periodes:
        success, ventes, dates = test_ventes_periode(dt1, dt2, desc)
        if success:
            results[(dt1, dt2)] = {"description": desc, "ventes": len(ventes), "dates": dates}
    
    # R√©sum√©
    print("\n===== R√âSUM√â DES TESTS =====")
    if results:
        print("P√©riode | Nombre de ventes | R√©partition")
        print("------------------------------------------")
        for (dt1, dt2), result in sorted(results.items()):
            dates_str = ", ".join([f"{date}: {count}" for date, count in sorted(result["dates"].items())])
            print(f"{dt1} √† {dt2} | {result['ventes']} | {dates_str}")
        
        # Trouver la meilleure p√©riode
        best_period = max(results.items(), key=lambda x: x[1]["ventes"])
        dt1, dt2 = best_period[0]
        
        print(f"\nüîç RECOMMANDATION:")
        print(f"La p√©riode optimale pour r√©cup√©rer les ventes est du {dt1} au {dt2}")
        print(f"Nombre de ventes: {best_period[1]['ventes']}")
        print(f"R√©partition: {', '.join([f'{date}: {count}' for date, count in sorted(best_period[1]['dates'].items())])}")
        
        print("\nCode √† modifier dans le Lambda:")
        print(generate_lambda_code(dt1, dt2))
    else:
        print("‚ùå Aucune p√©riode n'a fonctionn√©. Essayez d'autres dates.")